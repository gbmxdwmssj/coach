import os
import sys
import gym
import yaml
import time
from gym import spaces
import numpy as np
from math import *
from nav_msgs.msg import Path
from geometry_msgs.msg import PoseStamped

# Get directory
sys.path.append('/home/kai/catkin_ws/src/drproj/')

# from .py_file_name import class_name
from a_star_planner import AStarPlanner
from robot_model import RobotModel
from vehicle_state import VehicleState
from vehicle_model import VehicleModel
import matplotlib.image as mpimg
from grid_map import GridMap
from virtual_vehicle import VirtualVehicle
from dwa_planner import DWAPlanner

class WOriEntityEnv(gym.Env):



    def __init__(self):
        self.action_space = spaces.Box(low=np.array([0.0]), high=np.array([10.0]))
        self.observation_space = spaces.Box(low=np.array([0.0, 0.0, -180.0]), high=np.array([10.0, 10.0, 180.0]))

        self.global_mission = yaml.load(open('/home/kai/catkin_ws/src/drproj/global_mission.yaml'))

        # Get global static map
        free = mpimg.imread('/home/kai/catkin_ws/src/drproj/free.png')
        map_config = yaml.load(open('/home/kai/catkin_ws/src/drproj/free.yaml'))
        static_grid_map = GridMap(free, map_config['resolution'])

        # Create a star planner
        vehicle_model = VehicleModel('/home/kai/catkin_ws/src/drproj/vehicle_config.yaml')
        half_length = 0.5 * vehicle_model.config['length']
        half_width = 0.5 * vehicle_model.config['width']
        radius = sqrt(half_length**2 + half_width**2)
        robot_model = RobotModel(radius)
        self.global_planner = AStarPlanner(robot_model)

        # Get global path
        start_grid_x = int(self.global_mission['start'][0] / static_grid_map.resolution + 0.5)
        start_grid_y = int(self.global_mission['start'][1] / static_grid_map.resolution + 0.5)
        goal_grid_x = int(self.global_mission['goal'][0] / static_grid_map.resolution + 0.5)
        goal_grid_y = int(self.global_mission['goal'][1] / static_grid_map.resolution + 0.5)
        start = (start_grid_x, start_grid_y)
        goal = (goal_grid_x, goal_grid_y)
        path = self.global_planner.get_path(start, goal, static_grid_map)

        # Create virtual vehicle
        vehicle_state = VehicleState(self.global_mission['start'][0], self.global_mission['start'][1], self.global_mission['start'][2])
        self.virtual_vehicle = VirtualVehicle(vehicle_state, vehicle_model, '', '', is_ros=False)

        # Create dwa planner
        self.dwa_planner = DWAPlanner(vehicle_model, '/home/kai/catkin_ws/src/drproj/dwa_planner_config.yaml', static_grid_map, is_ros=False)

        # Set global path
        msg = Path()
        for grid in self.global_planner.path:
            ps = PoseStamped()
            ps.pose.position.x = grid[0]
            ps.pose.position.y = grid[1]
            msg.poses.append(ps)

        self.dwa_planner.global_path_cb(msg)

        # Set initial state
        self.dwa_planner.vehicle_state.x = self.global_mission['start'][0]
        self.dwa_planner.vehicle_state.y = self.global_mission['start'][1]
        self.dwa_planner.vehicle_state.yaw = self.global_mission['start'][2]
        self.dwa_planner.vehicle_state.v = 0.0
        self.dwa_planner.vehicle_state.steer = 0.0



    def step(self, action):
        assert self.action_space.contains(action), "%r (%s) invalid"%(action, type(action))
        w_ori = fabs(action[0] - 5.0) / 5.0
        self.dwa_planner.config['w_ori'] = w_ori

        # move once
        start_time = time.clock()

        goal = self.dwa_planner.get_prospect()
        traj_cluster = self.dwa_planner.get_trajectory_cluster(self.dwa_planner.vehicle_state, self.dwa_planner.model.config['dt'])
        best_traj = self.dwa_planner.get_best_trajectory(traj_cluster, goal, self.dwa_planner.grid_map)
        v = best_traj[1].v
        steer = best_traj[1].steer
        res = self.virtual_vehicle.step(v, steer, self.dwa_planner.model.config['dt'])
        self.dwa_planner.vehicle_state.x = res.x
        self.dwa_planner.vehicle_state.y = res.y
        self.dwa_planner.vehicle_state.yaw = res.yaw
        self.dwa_planner.vehicle_state.v = res.v
        self.dwa_planner.vehicle_state.steer = res.steer

        self.dwa_planner.print_cnt += 1
        if self.dwa_planner.print_cnt > 10 or True:
            self.dwa_planner.print_cnt = 0
            # print('[dwa] w_ori: {}'.format(self.dwa_planner.config['w_ori']))

        end_time = time.clock()
        # print('[dwa] time elapsed in move_once: {}ms'.format(int((end_time - start_time) * 1000)))

        observation = np.array([self.dwa_planner.vehicle_state.x,
                            self.dwa_planner.vehicle_state.y,
                            self.dwa_planner.vehicle_state.yaw])

        dx = self.global_mission['goal'][0] - observation[0]
        dy = self.global_mission['goal'][1] - observation[1]
        dis = sqrt(dx**2 + dy**2)
        if dis < 2.0:
            reward = 10.0
            done = True
        else:
            reward = -0.1
            done = False

        return observation, reward, done, {}



    def reset(self):
        observation = np.array(self.global_mission['start'])
        state=[observation[0], observation[1], observation[2], 0.0, 0.0]
        self.virtual_vehicle.reset_vehicle_manually(state)
        self.dwa_planner.reset_planner_manually(state)
        return observation
