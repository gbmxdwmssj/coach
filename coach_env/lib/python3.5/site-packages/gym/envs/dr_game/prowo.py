import rospy
import gym
import yaml
from gym import spaces
import numpy as np
from drproj.srv import *
from math import *
from std_msgs.msg import Empty

class ProwoEnv(gym.Env):



    def __init__(self):
        rospy.init_node('prowo_env', anonymous=True)

        self.action_space = spaces.Box(low=np.array([-3.0, -3.0]), high=np.array([3.0, 3.0]))
        self.observation_space = spaces.Box(low=np.array([0.0, 0.0, -180.0]), high=np.array([10.0, 10.0, 180.0]))

        self.global_mission = yaml.load(open('/home/kai/catkin_ws/src/drproj/global_mission.yaml'))
        self.step_once = rospy.ServiceProxy('step_once', DrStep)
        self.reset_planner = rospy.ServiceProxy('reset_planner', ResetPlanner)



    def step(self, action):
        assert self.action_space.contains(action), "%r (%s) invalid"%(action, type(action))
        w_ori = fabs(fabs(action[0]) - 1.5) / 1.5
        prosp = fabs(action[1])
        rospy.wait_for_service('step_once')
        res = self.step_once(paras=[w_ori, prosp])
        observation = np.array(res.ob)
        observation = observation[0:3]

        dx = self.global_mission['goal'][0] - observation[0]
        dy = self.global_mission['goal'][1] - observation[1]
        dis = sqrt(dx**2 + dy**2)
        if dis < 2.0:
            reward = 10
            done = True
        else:
            reward = -0.1
            done = False

        return observation, reward, done, {}



    def reset(self):
        observation = np.array(self.global_mission['start'])
        rospy.wait_for_service('reset_planner')
        self.reset_planner(state=[observation[0], observation[1], observation[2],
                        0.0, 0.0])
        return observation
